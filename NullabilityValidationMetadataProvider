using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;

using Microsoft.AspNetCore.Mvc.ModelBinding.Metadata;

namespace JoeHarjung.AspNetCore.ImplicitRequiredFix
{
    public class NullabilityValidationMetadataProvider : IValidationMetadataProvider
    {
        public void CreateValidationMetadata(ValidationMetadataProviderContext Context)
        {
            // Need to set IsRequired for the validation metadata of root parameters that do
            // not allow null, otherwise model validation will skip validating null root values.

            // Note that IsRequired is different than the [Required] validation attribute.
            // IsRequired only forces validation to happen - the actual validation will
            // be handled by the NullabilityModelValidator.

            if (Context.Key.MetadataKind == ModelMetadataKind.Parameter && !Context.ValidationMetadata.IsRequired.GetValueOrDefault())
            {
                if (Context.Key.ParameterInfo == null)
                    throw new InvalidOperationException("No parameter info");

                var paramType = Context.Key.ParameterInfo.ParameterType;

                if (paramType.IsValueType)
                {
                    if (Nullable.GetUnderlyingType(paramType) == null)
                        Context.ValidationMetadata.IsRequired = true;
                }
                else
                {
                    var method = Context.Key.ParameterInfo.Member;

                    if (method.DeclaringType == null)
                        throw new InvalidOperationException("No declaring type");

                    var methodAttrs = method.GetCustomAttributes(false);
                    var classAttrs = method.DeclaringType.GetCustomAttributes(false);
                    var flags = NullabilityTree.UnpackFlags(paramType, Context.ParameterAttributes, methodAttrs, classAttrs);

                    if (flags.Flag == 1)
                        Context.ValidationMetadata.IsRequired = true;
                }
            }
        }
    }
}
